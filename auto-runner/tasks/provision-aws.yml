---
- name: Create an instance
  hosts: localhost
  gather_facts: no
  vars:
      gcp_project: on-demand-runners
      gcp_cred_kind: serviceaccount
      gcp_cred_file: {{ GCLOUD_SERVICE_KEY }}
      zone: "us-central1-a"
      region: "us-central1"

  tasks:
   - name: create a disk
     gcp_compute_disk:
         name: 'disk-instance'
         size_gb: 50
         source_image: 'projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts'
         zone: "{{ zone }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         scopes:
           - https://www.googleapis.com/auth/compute
         state: present
     register: disk
   - name: create a address
     gcp_compute_address:
         name: 'address-instance'
         region: "{{ region }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         scopes:
           - https://www.googleapis.com/auth/compute
         state: present
     register: address
   - name: create a instance
     gcp_compute_instance:
         state: present
         name: test-vm
         machine_type: n1-standard-1
         disks:
           - auto_delete: true
             boot: true
             source: "{{ disk }}"
         network_interfaces:
             - network: null # use default
               access_configs:
                 - name: 'External NAT'
                   nat_ip: "{{ address }}"
                   type: 'ONE_TO_ONE_NAT'
         zone: "{{ zone }}"
         project: "{{ gcp_project }}"
         auth_kind: "{{ gcp_cred_kind }}"
         service_account_file: "{{ gcp_cred_file }}"
         scopes:
           - https://www.googleapis.com/auth/compute
     register: instance

   - name: Wait for SSH to come up
     wait_for: host={{ address.address }} port=22 delay=10 timeout=60

   - name: Add host to groupname
     add_host: hostname={{ address.address }} groupname=new_instances


# - name: Start EC2 Instances
#   ec2_instance:
#     name: "{{ NAMESPACE }}-{{ RESOURCE_CLASS }}-{{ item }}"
#     region: "{{ REGION }}"
#     key_name: "{{ SSH_KEY_NAME }}"
#     vpc_subnet_id: "{{ VPC_ID }}"
#     instance_type: "{{ INSTANCE_TYPE }}"
#     security_group: "{{ SECURITY_GROUP }}"
#     network:
#       assign_public_ip: true
#     image_id: "{{ AMI_ID }}"
#     wait: false
#     state: running
#     user_data: "{{ lookup('file', 'user-data.yml') }}"
#   loop: "{{ range(0, NUMBER_OF_RUNNERS | int) | list }}"

# - name: Gather information about any instance with Name beginning with {{ NAMESPACE }}-{{ RESOURCE_CLASS }}-*
#   ec2_instance_info:
#     filters:
#       "tag:Name": "{{ NAMESPACE }}-{{ RESOURCE_CLASS }}-{{ item }}"
#   register: ec2_info
#   until: ec2_info.instances[0].state.name == "running"
#   retries: "{{ UNTIL_RETRIES_RUNNERS }}"
#   delay: 10
#   loop: "{{ range(0, NUMBER_OF_RUNNERS | int) | list }}"

# - name: Check if SSH is Available
#   wait_for: host="{{ item.instances[0].public_ip_address }}" port=22 delay=10  timeout=300
#   with_items: "{{ ec2_info.results }}"

# - name: Template EC2 Dynamic Inventory to only target On Demand Runners
#   template:
#     src: "aws_ec2.yml.j2"
#     dest: "aws_ec2.yml"
#   when: (TEMPLATE_DYNAMIC_INVENTORY | bool == true )
